---
description: For all nix related requests
globs: 
alwaysApply: false
---
# Nix Development Rules

## Repository Structure

This repository is a Nix-based dotfiles configuration using home-manager and nix-darwin. Here's the key structure:

- `flake.nix`: The main entry point for the Nix configuration
- `home-manager/`: Contains all home-manager configurations
  - `modules/`: Custom modules for various tools and applications
  - `programs/`: Program-specific configurations
  - `services/`: System services configurations
- `hosts/`: Host-specific configurations
  - `darwin/`: macOS-specific configurations
  - `linux/`: Linux-specific configurations
  - `nixos/`: NixOS-specific configurations
- `nix-darwin/`: Darwin-specific system configurations

## Conventions

### Module Structure
- Each module in `home-manager/modules/` should:
  1. Have a clear `default.nix`
  2. Include proper option declarations
  3. Follow the home-manager module structure

### Program Configuration
- Program configurations in `home-manager/programs/` should:
  1. Be organized by program name
  2. Include all necessary dependencies
  3. Use `home.packages` for package installations
  4. Use `programs.<name>` when available in home-manager

### Service Configuration
- Service configurations in `home-manager/services/` should:
  1. Follow systemd service conventions
  2. Include proper service dependencies
  3. Have clear documentation for service parameters

## Best Practices

1. Always pin package versions in `flake.lock`
2. Use `mkOption` for configurable options
3. Implement proper typing for all options
4. Document all custom modules and options
5. Follow the Nix expression language style guide
6. Test configurations before committing

## Common Patterns

```nix
# Module template
{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.modules.<name>;
in {
  options.modules.<name> = {
    enable = mkEnableOption "name";
    # Add other options here
  };

  config = mkIf cfg.enable {
    # Add configuration here
  };
}
```

## Debugging Tips

1. Use `nix flake check` to validate flake
2. Debug with `home-manager build --show-trace`
3. Check system closure with `nix-store --query --references`
4. Use `nix develop` for development shell

## Related Files
- flake.nix
- home-manager/default.nix
- nix-darwin/default.nix

